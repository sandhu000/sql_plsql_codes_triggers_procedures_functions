CREATE OR REPLACE PROCEDURE ShowWeeksOfYear(
  p_year NUMBER
) AS
  curr_date DATE;
  v_id NUMBER;
  v_week_start DATE;
  v_weeks SYS.ODCIDATELIST := SYS.ODCIDATELIST(); -- Collection to store unique week start dates
BEGIN
  curr_date := TO_DATE(p_year || '-01-01', 'YYYY-MM-DD'); -- Start from the first day of the year

  WHILE EXTRACT(YEAR FROM curr_date) = p_year AND curr_date < TO_DATE((p_year + 1) || '-01-01', 'YYYY-MM-DD') LOOP
    BEGIN
      v_week_start := TRUNC(curr_date, 'IW'); -- Start of the week (Sunday)

      -- Check if the week start date already exists in the collection
      DECLARE
        v_week_exists BOOLEAN := FALSE; -- Flag to track week existence
      BEGIN
        FOR i IN 1..v_weeks.COUNT LOOP
          IF v_weeks(i) = v_week_start THEN
            v_week_exists := TRUE;
            EXIT;
          END IF;
        END LOOP;

        IF NOT v_week_exists THEN
          v_weeks.EXTEND;
          v_weeks(v_weeks.COUNT) := v_week_start;

          SELECT COALESCE(MAX(id), 0) INTO v_id FROM Monthly_Schedule;

          IF v_id = 0 THEN
            v_id := 1;
          ELSE
            v_id := v_id + 1;
          END IF;

          INSERT INTO Monthly_Schedule (id, event_date, event_description, location, start_date, end_date, months_between)
          VALUES (
            v_id,
            curr_date,
            'Event 1',
            'Location 1',
            v_week_start,
            v_week_start + INTERVAL '6' DAY, -- End of the week (Saturday)
            MONTHS_BETWEEN(TO_DATE(p_year || '-01-01', 'YYYY-MM-DD'), curr_date)
          );
        END IF;
      EXCEPTION
        WHEN DUP_VAL_ON_INDEX THEN
          v_id := v_id + 1; 
          CONTINUE; 
      END;

      curr_date := curr_date + INTERVAL '7' DAY; -- Move to the next week
    END;
  END LOOP;

  COMMIT;
END;
/


begin
  ShowWeeksOfYear(2023);
  end;
  /
  select * from monthly_schedule order by id;