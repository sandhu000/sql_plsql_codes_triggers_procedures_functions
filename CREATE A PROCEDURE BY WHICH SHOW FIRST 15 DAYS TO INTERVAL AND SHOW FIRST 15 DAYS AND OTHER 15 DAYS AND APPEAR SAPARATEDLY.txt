
CREATE OR REPLACE PROCEDURE ShowMonthsOfYear(
  p_month NUMBER,
  p_year NUMBER
) AS
  curr_date DATE;
  v_id NUMBER; 
BEGIN
  IF p_month < 1 OR p_month > 12 THEN
    RAISE_APPLICATION_ERROR(-20001, 'Invalid month provided');
  END IF;

  curr_date := TO_DATE(p_year || '-' || p_month || '-01', 'YYYY-MM-DD'); -- Start from the first day of the specified month

  SELECT COALESCE(MAX(id), 0) INTO v_id FROM Monthly_Schedule;

  IF v_id = 0 THEN
    v_id := 1;
  ELSE
    v_id := v_id + 1;
  END IF;

  WHILE EXTRACT(YEAR FROM curr_date) = p_year LOOP -- Loop for the specified year
    BEGIN
      INSERT INTO Monthly_Schedule (id, event_date, event_description, location, start_date, end_date, months_between)
      VALUES (
        v_id,
        curr_date,
        'Event 1',
        'Location 1',
        curr_date,
        CASE 
          WHEN EXTRACT(DAY FROM curr_date) <= 15 THEN curr_date + INTERVAL '14' DAY
          ELSE curr_date + INTERVAL '15' DAY
        END,
        MONTHS_BETWEEN(TO_DATE(p_year || '-' || p_month || '-01', 'YYYY-MM-DD'), curr_date)
      );
      v_id := v_id + 1;

      INSERT INTO Monthly_Schedule (id, event_date, event_description, location, start_date, end_date, months_between)
      VALUES (
        v_id,
        CASE 
          WHEN EXTRACT(DAY FROM curr_date) <= 15 THEN curr_date + INTERVAL '15' DAY
          ELSE curr_date + INTERVAL '16' DAY
        END,
        'Event 2',
        'Location 2',
        CASE 
          WHEN EXTRACT(DAY FROM curr_date) <= 15 THEN curr_date + INTERVAL '15' DAY
          ELSE curr_date + INTERVAL '16' DAY
        END,
        CASE
          WHEN p_month = 2 AND EXTRACT(YEAR FROM curr_date) = p_year AND TO_CHAR(curr_date, 'YYYY-MM-DD') = p_year || '-02-15' THEN curr_date + INTERVAL '16' DAY
          ELSE LAST_DAY(curr_date)
        END,
        MONTHS_BETWEEN(TO_DATE(p_year || '-' || p_month || '-01', 'YYYY-MM-DD'), curr_date + INTERVAL '15' DAY)
      );
      v_id := v_id + 1;

    EXCEPTION
      WHEN DUP_VAL_ON_INDEX THEN
        v_id := v_id + 1; 
        CONTINUE; 
    END;

    curr_date := ADD_MONTHS(curr_date, 1);
  END LOOP;

  COMMIT;
END;
/


BEGIN
  ShowMonthsOfYear(7, 2023); -- For January 2023
END;
/


SELECT * FROM MONTHLY_SCHEDULE order by id;
DELETE FROM MONTHLY_SCHEDULE