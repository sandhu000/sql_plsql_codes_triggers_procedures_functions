
CREATE OR REPLACE PROCEDURE ShowMonthsBetweenDates(
  p_start_date DATE,
  p_end_date DATE
) AS
  curr_date DATE;
  v_id NUMBER;
BEGIN
  curr_date := TRUNC(p_start_date, 'MM');

  -- Get the maximum ID from the Monthly_Schedule table
  SELECT COALESCE(MAX(id), 0) INTO v_id FROM Monthly_Schedule;

  -- Increment the ID if it violates the unique constraint
  IF v_id = 0 THEN
    v_id := 1;
  ELSE
    v_id := v_id + 1;
  END IF;

  WHILE curr_date <= TRUNC(p_end_date, 'MM') LOOP
    BEGIN
      INSERT INTO Monthly_Schedule (id, event_date, event_description, location, start_date, end_date, months_between)
      VALUES (
        v_id,
        curr_date,
        'Event 1',
        'Location 1',
        p_start_date,
        p_end_date,
        MONTHS_BETWEEN(curr_date, p_end_date)
      );
      EXCEPTION
        WHEN DUP_VAL_ON_INDEX THEN
          v_id := v_id + 1; -- Increment the ID if a unique constraint violation occurs
          CONTINUE; -- Skip this iteration and proceed to the next loop
    END;

    curr_date := ADD_MONTHS(curr_date, 1);
    v_id := v_id + 1; -- Increment the unique ID
  END LOOP;

  COMMIT;
END;
/


DECLARE
  l_start_date DATE := DATE '2023-05-01';
  l_end_date DATE := DATE '2023-10-31';
BEGIN
  ShowMonthsBetweenDates(l_start_date, l_end_date);
  COMMIT;
END;
/

SELECT * FROM MONTHLY_SCHEDULE ORDER BY ID ;



UPDATE monthly_schedule
SET start_date = TRUNC(event_date, 'MONTH'),
    end_date = LAST_DAY(TRUNC(event_date, 'MONTH'));
