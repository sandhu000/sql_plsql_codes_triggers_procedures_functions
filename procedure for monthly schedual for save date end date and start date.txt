CREATE OR REPLACE PROCEDURE ShowMonthsBetweenDates(
  p_start_date DATE, ----------------------------START DATE & END DATE PROCEDURE 
  p_end_date DATE
) AS
  curr_date DATE;-------------------Declares a local variable curr_date of type DATE
  v_id NUMBER; --------------- VARIABLE DECLARE USED TO RETERIVE THE MAXIMUM ID 
BEGIN
  curr_date := TRUNC(p_start_date, 'MM');

  -- Get the maximum ID from the Monthly_Schedule table
  SELECT COALESCE(MAX(id)
, 0) INTO v_id FROM Monthly_Schedule;

  -- Increment the ID if it violates the unique constraint
  IF v_id = 0 THEN---------------------INCREMENT 1 BY THIS UNIQUE ID 
    v_id := 1;
  ELSE
    v_id := v_id + 1;
  END IF;

  WHILE curr_date <= TRUNC(p_end_date, 'MM') LOOP--------------------USING LOOP FUNCTION TO TRUNCT THEH END DATE MM(MONTH'S)
    BEGIN
      UPDATE Monthly_Schedule
      SET start_date = TRUNC(curr_date, 'MONTH'),
          end_date = LAST_DAY(TRUNC(curr_date, 'MONTH'))
      WHERE event_date = curr_date;

      IF SQL%ROWCOUNT = 0 THEN--------------------NO ROW IS UPDATED THEN SQL FUNCTION IS 0
        INSERT INTO Monthly_Schedule (id, event_date, event_description, location, start_date, end_date, months_between)
        VALUES (
          v_id,
          curr_date,
          'Event 1',
          'Location 1',
          TRUNC(curr_date, 'MONTH'),
          LAST_DAY(TRUNC(curr_date, 'MONTH')),
          MONTHS_BETWEEN(curr_date, p_end_date)
        );
        v_id := v_id + 1; -- Increment the unique ID
      END IF;

      EXCEPTION
        WHEN DUP_VAL_ON_INDEX THEN
          v_id := v_id + 1; -- Increment the ID if a unique constraint violation occurs
          CONTINUE; -- Skip this iteration and proceed to the next loop
    END;

    curr_date := ADD_MONTHS(curr_date, 1);
  END LOOP;

  COMMIT;
END;
/


DECLARE
  p_start_date DATE := TO_DATE('2023-04-01', 'YYYY-MM-DD');
  p_end_date DATE := TO_DATE('2023-10-30', 'YYYY-MM-DD');
BEGIN
  ShowMonthsBetweenDates(p_start_date, p_end_date);
END;
/

SELECT * FROM MONTHLY_SCHEDULE order by id;